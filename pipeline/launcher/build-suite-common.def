#------------------------------------------------------------------------------
# These sections are appended to all assembled suite-level singularity.def files,
# after replacing __VAR_NAME__ with ${VAR_NAME}.
#------------------------------------------------------------------------------
# https://sylabs.io/guides/latest/user-guide/definition_files.html
#------------------------------------------------------------------------------
# STATIC_SUITE_DIR=/srv/static/SUITE_NAME is a suite-centric installation of 
# SUITE_NAME that contains the Stage 1 environment (and Stage 2 library) builds.
# It is a set of read-only files installed at build time, used by running tools.
#------------------------------------------------------------------------------
# ACTIVE_MDI_DIR=/srv/active/mdi is an MDI installation including SUITE_NAME and
# bind-mounted at run time, which is modifiable to check out patch versions, etc.
# It provides the MDI code for running apps, supported by STATIC_SUITE_DIR,
# including the paths required to write dynamic app session files.
#------------------------------------------------------------------------------
# TASK_DIR is a user-defined, active, read-write folder bind-mounted at run time. 
# In addition to being where pipelines deposit data files, TASK_DIR has a fixed, 
# static copy of the tool suite code required to execute a pipeline.
#------------------------------------------------------------------------------

# copy the previously-versioned MDI tool suite repository into the container
%setup
    SRV_DIR=/srv
    STATIC_DIR=${SINGULARITY_ROOTFS}${SRV_DIR}/static
    mkdir -p ${STATIC_DIR}
    cp -r ./containers/tmp/__SUITE_NAME__ ${STATIC_DIR}

# install the software required by pipeline actions as conda environments
# install Shiny and other R packages if the container supports apps
%post

    # path variables set by us
    SRV_DIR=/srv
    MINICONDA_DIR=${SRV_DIR}/miniconda  
    export PATH=${MINICONDA_DIR}/bin:${PATH} 

    # variables set by mdi build
    BASE_NAME=mdi-singularity-base    
    SUITE_NAME=__SUITE_NAME__
    SUITE_VERSION=__SUITE_VERSION__
    SUITE_CONTAINER_VERSION=__SUITE_CONTAINER_VERSION__
    INSTALLER=__INSTALLER__
    export MDI_FORCE_GIT=__MDI_FORCE_GIT__
    export MDI_INSTALL_PIPELINES=__MDI_INSTALL_PIPELINES__
    export MDI_FORCE_APPS=__MDI_FORCE_APPS__
    export MDI_SKIP_APPS=__MDI_SKIP_APPS__
    STATIC_DIR=${SRV_DIR}/static
    STATIC_SUITE_DIR=${STATIC_DIR}/${SUITE_NAME}
    STATIC_BASE_DIR=${STATIC_DIR}/${BASE_NAME}
    if [ "$SUITE_NAME" = "$BASE_NAME" ] then; IS_BASE_INSTALL=true; fi

    # install/update git, zip, and others as used by the MDI
    if [ "$INSTALLER" = "apt-get" ] || \
       [ "$INSTALLER" = "yum" ]; then
        $INSTALLER update && $INSTALLER install -y git wget zip time
    else 
        echo "unknown installer: $INSTALLER"
        exit 1
    fi

    # copy existing R library if we are extending a prior Stage 2 MDI container build
    if [ "$MDI_FORCE_APPS" = "true" ] && [ -d ${STATIC_BASE_DIR} ] && [ "$IS_BASE_INSTALL" = "" ]; then
        rm -r ${STATIC_SUITE_DIR}/mdi/library
        mv ${STATIC_BASE_DIR}/mdi/library to ${STATIC_SUITE_DIR}/mdi
        rm -r ${STATIC_BASE_DIR}
    fi

    # execute the suite-centric installation of __SUITE_NAME__:__SUITE_VERSION__
    # flags set above will clone repos and continue to install Shiny if container:stages:apps==true
    # unlike pipeline condas, app packages are installed for any suite dependencies also
    cd ${STATIC_SUITE_DIR}
    export MDI_FORCE_SYSTEM_INSTALL=true
    ./install.sh
    cd ${STATIC_SUITE_DIR}/mdi/suites/definitive/${SUITE_NAME}
    git checkout ${SUITE_VERSION}
    # TODO: checkout declared versions of any suite dependencies?

    # install __SUITE_NAME__:__SUITE_VERSION__ conda environments if container:stages:pipelines==true
    if [ "$MDI_INSTALL_PIPELINES" = "true" ]; then

        # install conda itself if not already present from base image
        if [ ! -d ${MINICONDA_DIR} ]; then
            wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ${SRV_DIR}/miniconda.sh
            bash ${SRV_DIR}/miniconda.sh -b -p ${MINICONDA_DIR} 

            # set conda channel_priority to strict
            # https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-channels.html#strict-channel-priority
            # https://github.com/conda/conda/issues/8197
            conda config --set channel_priority strict
        fi

        # creata conda environments for all __SUITE_NAME__:__SUITE_VERSION__ pipelines (but not it's suite dependencies)
        export IS_CONTAINER_BUILD=TRUE    
        PIPELINES=`ls -1 pipelines | grep -v -P "^_"`
        for PIPELINE in $PIPELINES; do 
            if [ ! -f $PIPELINE ]; then
                ${STATIC_SUITE_DIR}/mdi/mdi ${PIPELINE} conda --create --force --no-mamba --version ${SUITE_VERSION} 
            fi
        done

        # clean up conda pkgs directory of cached tarballs (conda clean won't work here)
        rm -f ${MINICONDA_DIR}/pkgs/*.tar.bz2
    fi

# path overrides include all ways that running pipelines use files from mdi-pipelines-framework
# https://sylabs.io/guides/latest/user-guide/environment_and_metadata.html#environment-and-metadata
%environment 
    export LC_ALL=C
    export HAS_PIPELINES=__HAS_PIPELINES__
    export HAS_APPS=__HAS_APPS__

    # conda path specifications
    export SRV_DIR=/srv
    export MINICONDA_DIR=${SRV_DIR}/miniconda     
    export PATH=${MINICONDA_DIR}/bin:${PATH}  
    export CONDA_LOAD_COMMAND=""   
    export CONDA_PROFILE_SCRIPT=${MINICONDA_DIR}/etc/profile.d/conda.sh

    # static, read only, code path specifications; environments, library, pipelines framework
    export SUITE_NAME=__SUITE_NAME__
    export STATIC_SUITE_DIR=${SRV_DIR}/static/${SUITE_NAME}
    export STATIC_MDI_DIR=${STATIC_SUITE_DIR}/mdi
    export ENVIRONMENTS_DIR=${STATIC_MDI_DIR}/environments
    export R_LIBRARY_DIR=${STATIC_MDI_DIR}/library
    # export RESOURCES_DIR=${STATIC_MDI_DIR}/resources    
    export FRAMEWORK_DIR=${STATIC_MDI_DIR}/frameworks/definitive/mdi-pipelines-framework
    export JOB_MANAGER_DIR=${FRAMEWORK_DIR}/job_manager
    export LAUNCHER_DIR=${FRAMEWORK_DIR}/pipeline/launcher
    export WORKFLOW_DIR=${FRAMEWORK_DIR}/pipeline/workflow
    export WORKFLOW_SH=${WORKFLOW_DIR}/workflow.sh
    export SLURP=${FRAMEWORK_DIR}/shell/slurp 

    # active, bind-mounted, read-write code path specifications used in Stage 2
    export ACTIVE_MDI_DIR=${SRV_DIR}/active/mdi    
    export MDI_DIR=${ACTIVE_MDI_DIR}

# scriplet called by
#   - install.pl/sh, to use singularity-base to add suites lacking container support, argument 'install'
#   - execute.pl, to launch a pipeline, argument 'pipeline'
#   - run.pl, to launch the web server, argument 'apps'
%runscript
    if [ "$1" = "install" ]; then
        export EXTENDING_CONTAINER_BASE=TRUE
        Rscript -e "mdi::install('$ACTIVE_MDI_DIR', confirm = FALSE, addToPATH = FALSE)"

    elif [ "$1" = "pipeline" ]; then
        if [ "$HAS_PIPELINES" != "true" ]; then 
            echo "container does not have __SUITE_NAME__ pipelines installed"
            exit 1
        fi 
        exec bash ${LAUNCHER_DIR}/execute.sh

    elif [ "$1" = "apps" ]; then
        if [ "$HAS_APPS" != "true" ]; then 
            echo "container does not have __SUITE_NAME__ apps installed"
            exit 1
        fi 
        shift
        exec bash ${ACTIVE_MDI_DIR}/mdi server $@

    else
        echo "usage error: please run this container using an MDI command"
    fi

# labels for the container image, displayed as 'singularity inspect __SUITE_NAME__-__SUITE_CONTAINER_VERSION__.sif'
%labels
    Source Michigan Data Interface
    SuiteName __SUITE_NAME__
    SuiteVersion __SUITE_VERSION__
    ContainerBase __CONTAINER_BASE__
    ContainerBaseVersion __CONTAINER_BASE_VERSION__
    Pipelines __HAS_PIPELINES__
    Apps __HAS_APPS__

# help text displayed by 'singularity run-help __SUITE_NAME__-__SUITE_CONTAINER_VERSION__.sif'
%help
    Source:    Michigan Data Interface
    Suite:     __SUITE_NAME__:__SUITE_VERSION__
    Base:      __CONTAINER_BASE__:__CONTAINER_BASE_VERSION__
    Pipelines: __HAS_PIPELINES__
    Apps:      __HAS_APPS__
